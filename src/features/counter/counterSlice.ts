// Importing necessary functions and types from Redux Toolkit.
// `createSlice` is used to create a slice of the Redux state.
// `createAsyncThunk` is used to handle asynchronous actions.
// `PayloadAction` is a type that represents an action with a payload.
import {
  createAsyncThunk,
  createSlice,
  type PayloadAction,
} from "@reduxjs/toolkit";

// Defining the shape of the counter's state using a TypeScript interface.
// This ensures type safety when working with the state.
interface CounterState {
  value: number; // The `value` property represents the current count.
}

// Defining the initial state for the counter slice.
// This is the starting point for the counter's state.
const initialState: CounterState = {
  value: 0, // The counter starts at 0.
};

// Creating the counter slice using `createSlice`.
// A slice contains the state, reducers, and actions for a specific feature.
const counterSlice = createSlice({
  // The name of the slice, used as a prefix for action types.
  name: "counter",

  // The initial state for this slice.
  initialState,

  // Reducers define how the state is updated in response to actions.
  reducers: {
    // The `increment` reducer increases the counter's value by 1.
    increment: (state) => {
      state.value += 1;
    },

    // The `decrement` reducer decreases the counter's value by 1.
    decrement: (state) => {
      state.value -= 1;
    },

    // The `incrementByAmount` reducer increases the counter's value by a specific amount.
    // The amount is provided as the payload of the action.
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },

  // `extraReducers` is used to handle actions that are not defined in this slice.
  // This is commonly used for handling asynchronous actions created with `createAsyncThunk`.
  extraReducers: (builder) => {
    // Handling the `pending` state of the `incrementAsync` thunk.
    builder.addCase(incrementAsync.pending, () => {
      console.log("incrementAsync pending"); // Logs when the async action is pending.
    });

    // Handling the `fulfilled` state of the `incrementAsync` thunk.
    builder.addCase(
      incrementAsync.fulfilled,
      (state, action: PayloadAction<number>) => {
        state.value += action.payload; // Updates the state with the resolved value.
      }
    );
  },
});

// Creating an asynchronous thunk using `createAsyncThunk`.
// This thunk simulates an asynchronous operation (e.g., an API call).
export const incrementAsync = createAsyncThunk(
  "counter/incrementAsync", // The action type for this thunk.
  async (amount: number) => {
    // Simulating a delay using `setTimeout`.
    await new Promise((resolve) => setTimeout(resolve, 1000));
    return amount; // Returns the amount after the delay.
  }
);

// Exporting the actions generated by `createSlice`.
// These actions can be dispatched to update the state.
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// Exporting the reducer generated by `createSlice`.
// This reducer will be added to the Redux store.
export default counterSlice.reducer;